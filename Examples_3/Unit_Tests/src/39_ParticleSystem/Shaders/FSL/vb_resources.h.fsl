/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#ifndef vb_resources_h
#define vb_resources_h

#include "../../../../../../Common_3/Graphics/ShaderUtilities.h.fsl"

#define MAX_TEXTURE_UNITS 256

RES(SamplerState, textureFilter, UPDATE_FREQ_NONE, s2, binding = 3);
RES(Buffer(uint), indirectDataBuffer, UPDATE_FREQ_PER_FRAME, t0, binding=4);
RES(ByteBuffer, vertexTexCoordBuffer, UPDATE_FREQ_NONE, t2, binding = 5);
RES(ByteBuffer, vertexPositionBuffer, UPDATE_FREQ_NONE, t3, binding = 6);
RES(Tex2D(float4), diffuseMaps[MAX_TEXTURE_UNITS], UPDATE_FREQ_NONE, t4, binding = 7);

STRUCT(PsInShadowOpaque)
{
	DATA(float4, position, SV_Position);
	DATA(float4, wsPosition, POSITION);
};

STRUCT(PsOutShadow)
{
	DATA(float, depth, SV_Depth);
};

STRUCT(PsInShadowAlphaTested)
{
	DATA(float4, position, SV_Position);
	DATA(float2, texCoord, TEXCOORD0);
	DATA(float3, wsPosition, POSITION);
	DATA(FLAT(uint), materialID, TEXCOORD1);
};

STRUCT(PsOutShadowAlphaTested)
{
	DATA(float, depth, SV_Depth);
};

STRUCT(PsInVBOpaque)
{
	DATA(float4, position, SV_Position);
};

STRUCT(PsInVBAlphaTested)
{
	DATA(float4, position, SV_Position);
	DATA(float2, texCoord, TEXCOORD0);
	DATA(FLAT(uint), materialID, TEXCOORD1);
};

float4 LoadVertex(uint index)
{
    return float4(asfloat(LoadByte4(Get(vertexPositionBuffer), index * 12)).xyz, 1.0f);
}

float2 LoadTexCoord(uint index)
{
	return unpack2Floats(LoadByte(Get(vertexTexCoordBuffer), index << 2));
}

#endif /* vb_resources_h */
