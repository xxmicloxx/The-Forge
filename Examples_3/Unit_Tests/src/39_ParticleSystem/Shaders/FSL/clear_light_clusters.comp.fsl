/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "shader_defs.h.fsl"
#include "light_cull_resources.h.fsl"

NUM_THREADS(LIGHT_CLUSTER_WIDTH, LIGHT_CLUSTER_HEIGHT, 1)
void CS_MAIN( SV_DispatchThreadID(uint3) threadID )
{
	INIT_MAIN;
	
	uint depthClusterId = LIGHT_CLUSTER_COUNT_POS(threadID.x, threadID.y);
	
	UNROLL_N(HORIZONTAL_SUBCLUSTER_COUNT)
	for (uint i=0; i<HORIZONTAL_SUBCLUSTER_COUNT; i++)
	{
		UNROLL_N(VERTICAL_SUBCLUSTER_COUNT)
		for (uint j=0; j<VERTICAL_SUBCLUSTER_COUNT; j++)
		{
			uint clusterId = threadID.x*VERTICAL_SUBCLUSTER_COUNT + j + (threadID.y*HORIZONTAL_SUBCLUSTER_COUNT+i)*VERTICAL_SUBCLUSTER_COUNT*LIGHT_CLUSTER_WIDTH;
			Get(lightClustersCount)[clusterId] = 0;
			Get(DepthBoundsBuffer)[clusterId * DEPTH_BOUNDS_ENTRY_SIZE] = UINT_MAX;
			Get(DepthBoundsBuffer)[clusterId * DEPTH_BOUNDS_ENTRY_SIZE+1] = 0;
			Get(DepthBoundsBuffer)[clusterId * DEPTH_BOUNDS_ENTRY_SIZE+2] = 0;
		}
	}	

	RETURN();
}
