/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

PUSH_CONSTANT(ShadowRootConstants, b0)
{
	DATA(uint, CubeIndex, None);
	DATA(uint, ParticleIndex, None);
};

#include "shader_defs.h.fsl"
#include "vb_resources.h.fsl"

#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/particle_shared.h.fsl"
#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/particle_packing.h.fsl"
#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/particle_sets.h.fsl"

PS_ZORDER_EARLYZ()
PsOutShadow PS_MAIN( PsInShadowOpaque In )
{
	INIT_MAIN;
	PsOutShadow Out;
	Out.depth = 0.0;

	// Don't access particle data if the shadow is directional
	if (Get(CubeIndex) > 0)
	{
		uint Bitfield = Get(BitfieldBuffer)[Get(ParticleIndex)];
		ParticleData particle = Get(ParticlesDataBuffer)[Get(ParticleIndex)];

		float3 pos = GetParticlePosition(GetParticleSet(Bitfield & PARTICLE_BITFIELD_SET_INDEX_MASK), particle);
		Out.depth = 1.0 - (length(In.wsPosition.xyz - pos.xyz) - CAMERA_NEAR) / (CAMERA_FAR - CAMERA_NEAR);
	}
	else
		Out.depth = In.position.z;
	
	RETURN(Out);
}
