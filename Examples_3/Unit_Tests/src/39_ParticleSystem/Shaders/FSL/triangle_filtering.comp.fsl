//
// Copyright (c) 2016 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

// Confetti changes
// Culling triangles that intersect the near plane
// Small primitive culling now supports MSAA
// Multi-viewport culling

#include "shader_defs.h.fsl"
#include "../../../../../../Common_3/Graphics/ShaderUtilities.h.fsl"
#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/particle_sets.h.fsl"
#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/particle_packing.h.fsl"

RES(RWBuffer(ParticleData), ParticlesDataBuffer, UPDATE_FREQ_PER_FRAME, u52, binding = 11);
RES(RWBuffer(uint), BitfieldBuffer, UPDATE_FREQ_PER_FRAME, u53, binding = 10);
RES(ByteBuffer, indexDataBuffer, UPDATE_FREQ_NONE, t13, binding = 4);
RES(Buffer(MeshConstants), meshConstantsBuffer, UPDATE_FREQ_NONE, t4, binding = 5);
#include "../../../../../../Common_3/Renderer/VisibilityBuffer/Shaders/FSL/triangle_filtering.h.fsl"

NUM_THREADS(VB_COMPUTE_THREADS, 1, 1)
void CS_MAIN( SV_GroupThreadID(uint3) threadId, SV_GroupID(uint3) groupId )
{
    INIT_MAIN;
    	
	if (threadId.x == 0)
	{
        UNROLL_N(NUM_UNIQUE_GEOMETRIES)
		for (uint i = 0; i < NUM_UNIQUE_GEOMETRIES; ++i)
        	AtomicStore(workGroupIndexCount[i], 0u);

		filterDispatchGroupData = Get(filterDispatchGroupDataBuffer)[groupId.x];
	}

    GroupMemoryBarrier();

	bool cull[NUM_UNIQUE_GEOMETRIES];
	uint threadOutputSlot[NUM_UNIQUE_GEOMETRIES];

    UNROLL_N(NUM_UNIQUE_GEOMETRIES)
	for (uint i = 0; i < NUM_UNIQUE_GEOMETRIES; ++i)
	{
		threadOutputSlot[i] = 0;
		cull[i] = true;
	}

	uint batchMeshIndex = filterDispatchGroupData.meshIndex;
	uint batchGeomSet = ((filterDispatchGroupData.geometrySet_faceCount & BATCH_GEOMETRY_MASK) >> BATCH_GEOMETRY_LOW_BIT);
	uint batchInputIndexOffset = (Get(meshConstantsBuffer)[batchMeshIndex].indexOffset + filterDispatchGroupData.indexOffset);
	uint vertexOffset = Get(meshConstantsBuffer)[batchMeshIndex].vertexOffset;
	bool twoSided = (Get(meshConstantsBuffer)[batchMeshIndex].twoSided == 1);
	uint batchFaceCount =  ((filterDispatchGroupData.geometrySet_faceCount & BATCH_FACE_COUNT_MASK) >> BATCH_FACE_COUNT_LOW_BIT);

	uint indices[3] = { 0, 0, 0 };
	if (threadId.x < batchFaceCount)
	{
		indices[0] = vertexOffset + LoadByte(Get(indexDataBuffer), (threadId.x * 3 + 0 + batchInputIndexOffset) << 2);
		indices[1] = vertexOffset + LoadByte(Get(indexDataBuffer), (threadId.x * 3 + 1 + batchInputIndexOffset) << 2);
		indices[2] = vertexOffset + LoadByte(Get(indexDataBuffer), (threadId.x * 3 + 2 + batchInputIndexOffset) << 2);

		Get(indirectDataBuffer)[indices[0]] = batchMeshIndex;
		Get(indirectDataBuffer)[indices[1]] = batchMeshIndex;
		Get(indirectDataBuffer)[indices[2]] = batchMeshIndex;

		float4 vert[3] =
		{
			LoadVertex(indices[0]),
			LoadVertex(indices[1]),
			LoadVertex(indices[2])
		};

		for (uint i=0; i<2; i++)
		{
			float4 vertices[3] =
			{
				mul(Get(transform)[i].mvp.mat, vert[0]),
				mul(Get(transform)[i].mvp.mat, vert[1]),
				mul(Get(transform)[i].mvp.mat, vert[2])
			};

			cull[i] = FilterTriangle(indices, vertices, !twoSided, Get(cullingViewports)[i].windowSize, Get(cullingViewports)[i].sampleCount);
			if (!cull[i])
				AtomicAdd(workGroupIndexCount[i], 3, threadOutputSlot[i]);
		}

		uint validFaces[6];
		uint validFaceAmount;
		
		UNROLL_N(SHADOW_COUNT)
		for (uint j=0; j<SHADOW_COUNT && cull[VIEW_POINT_SHADOW+j]; j++)
		{
			uint Bitfield = Get(BitfieldBuffer)[j];

			if ((Bitfield & PARTICLE_BITFIELD_IS_ALIVE) > 0 && (Bitfield & PARTICLE_BITFIELD_LIGHT_CULLED) < 1)
			{
				// Face order: +x, -x, +y, -y, +z, -z
				ParticleData particle = Get(ParticlesDataBuffer)[j];

				float3 pos = GetParticlePosition(GetParticleSet(Bitfield & PARTICLE_BITFIELD_SET_INDEX_MASK), particle);
				float lightRadius = GetParticleSet(Bitfield & PARTICLE_BITFIELD_SET_INDEX_MASK).LightRadius;

				// Faces that the camera can see in front of it are always rendered: in this way
				// the Z faces are rendered even though they are far.
				validFaceAmount = 0;
				validFaces[validFaceAmount++] = 4;
				validFaces[validFaceAmount++] = 5;

				// Compute the indices of the cube faces that are visible by the camera
				UNROLL_N(2)
				for (uint i=0; i<2; i++)
				{
					float4 currPoint = float4(pos, 1.0);
					currPoint[i/2] += lightRadius;
					currPoint = mul(Get(transform)[VIEW_CAMERA].mvp.mat, currPoint);
					currPoint.xyz /= currPoint.w;

					if (currPoint[i/2] > 1)
						continue;

					validFaces[validFaceAmount++] = i*2;

					currPoint = float4(pos, 1.0);
					currPoint[i/2] -= lightRadius;
					currPoint = mul(Get(transform)[VIEW_CAMERA].mvp.mat, currPoint);
					currPoint.xyz /= currPoint.w;

					if (currPoint[i/2] < -1)
						continue;

					validFaces[validFaceAmount++] = i*2+1;
				}

				// For each face that is visible, filter its triangles
				for (uint i = 0; i < validFaceAmount && cull[VIEW_POINT_SHADOW+j]; ++i)
				{
					uint faceIdx = validFaces[i] + 2;
					float4 vertices[3] =
					{
						mul(Get(transform)[faceIdx].mvp.mat, vert[0] - float4(pos.xyz, 0.0)),
						mul(Get(transform)[faceIdx].mvp.mat, vert[1] - float4(pos.xyz, 0.0)),
						mul(Get(transform)[faceIdx].mvp.mat, vert[2] - float4(pos.xyz, 0.0))
					};

					if (abs(vertices[0].w) > lightRadius && abs(vertices[1].w) > lightRadius && abs(vertices[2].w) > lightRadius)
						continue;

					cull[VIEW_POINT_SHADOW+j] = cull[VIEW_POINT_SHADOW+j] && FilterTriangle(indices, vertices, !twoSided, Get(cullingViewports)[faceIdx].windowSize, Get(cullingViewports)[faceIdx].sampleCount);
				}

				if (!cull[VIEW_POINT_SHADOW+j])
					AtomicAdd(workGroupIndexCount[VIEW_POINT_SHADOW+j], 3, threadOutputSlot[VIEW_POINT_SHADOW+j]);
			}
		}
	}

    GroupMemoryBarrier();

	if (threadId.x == 0)
	{
        UNROLL_N(NUM_UNIQUE_GEOMETRIES)
		for (uint i = 0; i < NUM_UNIQUE_GEOMETRIES; ++i)
		{
			uint indirectDrawIndex = GET_INDIRECT_DRAW_ELEM_INDEX(i, batchGeomSet, 0);
            AtomicAdd(Get(indirectDrawArgs)[indirectDrawIndex], workGroupIndexCount[i], workGroupOutputSlot[i]);		
		}
	}

    GroupMemoryBarrier();

    UNROLL_N(NUM_UNIQUE_GEOMETRIES)
	for (uint j = 0; j < NUM_UNIQUE_GEOMETRIES; ++j)
	{
		if (!cull[j])
		{
            uint outputIndex = (AtomicLoad(workGroupOutputSlot[j]) + threadOutputSlot[j]);
            
			// Write index
			StoreByte(Get(filteredIndicesBuffer)[j], (INDEXBUFFER_OFFSET(batchGeomSet) + outputIndex + 0) << 2, indices[0]);
			StoreByte(Get(filteredIndicesBuffer)[j], (INDEXBUFFER_OFFSET(batchGeomSet) + outputIndex + 1) << 2, indices[1]);
			StoreByte(Get(filteredIndicesBuffer)[j], (INDEXBUFFER_OFFSET(batchGeomSet) + outputIndex + 2) << 2, indices[2]);
		}
	}

    RETURN();
}
