/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "shader_defs.h.fsl"
#include "../../../../../../Common_3/Graphics/ShaderUtilities.h.fsl"

#define SHADOW_PCF 0
#define SHADOW_ESM 1
#define SHADOW SHADOW_PCF
#ifdef TARGET_ANDROID
// GPU hang with 32 samples
#define NUM_SHADOW_SAMPLES 16
#else
#define NUM_SHADOW_SAMPLES 32
#endif

float3 calculateIllumination(
	float3 normal,
	float3 ViewVec,
	float3 HalfVec,
	float3 ReflectVec,
	float NoL,
	float NoV,
	float3 pCamPos, float pEsmControl,
	float3 normalizedDirToLight, float4 posLS, float3 position,
	Tex2D(float) pShadowMap,
	float3 albedo,
	float3 specularColor,
	float Roughness,
	float Metallic,
	SamplerState sh,
	bool isBackface,
	float isPBR,
	inout(float) shadowFactor)
{
	// Project pixel position post-perspective division coordinates and map to [0..1] range to access the shadow map
	posLS /= posLS.w;
	posLS.y *= -1;
	posLS.xy = posLS.xy * 0.5 + float2(0.5, 0.5);

	float2 HalfGaps = float2(0.00048828125, 0.00048828125);
#if SHADOW == SHADOW_ESM
	float2 Gaps = float2(0.0009765625, 0.0009765625);
#endif

	posLS.xy += HalfGaps;

	shadowFactor = 0.0f;

	// float isInShadow = 0.0f;

	// if (all(posLS.xy > 0) && all(posLS.xy < 1))
    // if(greaterThan(posLS.xy, 0) && lessThan(posLS.xy, 1))
	if( all(GreaterThan(posLS.xy, 0)) && all(LessThan(posLS.xy, 1)))
	{
#if SHADOW == SHADOW_PCF

		// Placing this here to stop Vulkan Switch queue submission crashes. 
#if NUM_SHADOW_SAMPLES == 16
		float NUM_SHADOW_SAMPLES_INV = 0.0625;
		float shadowSamples[NUM_SHADOW_SAMPLES * 2] =
		{
			-0.1746646, -0.7913184,
			0.08863912, -0.898169,
			0.1748409, -0.5252063,
			0.4529319, -0.384986,
			0.3857658, -0.9096935,
			0.768011, -0.4906538,
			0.6946555, 0.1605866,
			0.7986544, 0.5325912,
			0.2847693, 0.2293397,
			-0.4357893, -0.3808875,
			-0.139129, 0.2394065,
			0.4287854, 0.899425,
			-0.6924323, -0.2203967,
			-0.2611724, 0.7359962,
			-0.850104, 0.1263935,
			-0.5380967, 0.6264234,
		};
#else
		float NUM_SHADOW_SAMPLES_INV = 0.03125;
		float shadowSamples[NUM_SHADOW_SAMPLES * 2] =
		{
			-0.1746646, -0.7913184,
			-0.129792, -0.4477116,
			0.08863912, -0.898169,
			-0.5891499, -0.6781639,
			0.1748409, -0.5252063,
			0.6483325, -0.752117,
			0.4529319, -0.384986,
			0.09757467, -0.1166954,
			0.3857658, -0.9096935,
			0.5613058, -0.1283066,
			0.768011, -0.4906538,
			0.8499438, -0.220937,
			0.6946555, 0.1605866,
			0.9614297, 0.05975229,
			0.7986544, 0.5325912,
			0.4513965, 0.5592551,
			0.2847693, 0.2293397,
			-0.2118996, -0.1609127,
			-0.4357893, -0.3808875,
			-0.4662672, -0.05288446,
			-0.139129, 0.2394065,
			0.1781853, 0.5254948,
			0.4287854, 0.899425,
			0.1289349, 0.8724155,
			-0.6924323, -0.2203967,
			-0.48997, 0.2795907,
			-0.2611724, 0.7359962,
			-0.7704172, 0.4233134,
			-0.850104, 0.1263935,
			-0.8345267, -0.4991361,
			-0.5380967, 0.6264234,
			-0.9769312, -0.1550569
		};
#endif

		// waste of shader cycles
		// Perform percentage-closer shadows with randomly rotated poisson kernel
		float shadowFilterSize = 0.0016;
		float angle = random(position, f3(20));
		float s = sin(angle);
		float c = cos(angle);

		for (int i = 0; i < NUM_SHADOW_SAMPLES; i++)
		{
			float2 offset = float2(shadowSamples[i * 2], shadowSamples[i * 2 + 1]);
			offset = float2(offset.x * c + offset.y * s, offset.x * -s + offset.y * c);
			offset *= shadowFilterSize;
			float shadowMapValue = SampleLvlTex2D(pShadowMap, sh, posLS.xy + offset, 0).x;
			shadowFactor += (shadowMapValue > posLS.z + 0.002 ? 0 : 1);
		}
		shadowFactor *= NUM_SHADOW_SAMPLES_INV;

#elif SHADOW == SHADOW_ESM

		// ESM
		float CShadow = pShadowMap.SampleLevel(sh, posLS.xy, 0).r;

		float LShadow = pShadowMap.SampleLevel(sh, posLS.xy + float2(-Gaps.x, 0.0), 0).r;
		float RShadow = pShadowMap.SampleLevel(sh, posLS.xy + float2(Gaps.x, 0.0), 0).r;

		float LTShadow = pShadowMap.SampleLevel(sh, posLS.xy + float2(-Gaps.x, Gaps.y), 0).r;
		float RTShadow = pShadowMap.SampleLevel(sh, posLS.xy + float2(Gaps.x, Gaps.y), 0).r;

		float TShadow = pShadowMap.SampleLevel(sh, posLS.xy + float2(0.0, Gaps.y), 0).r;
		float BShadow = pShadowMap.SampleLevel(sh, posLS.xy + float2(0.0, -Gaps.y), 0).r;

		float LBShadow = pShadowMap.SampleLevel(sh, posLS.xy + float2(-Gaps.x, -Gaps.y), 0).r;
		float RBShadow = pShadowMap.SampleLevel(sh, posLS.xy + float2(Gaps.x, -Gaps.y), 0).r;

		float nbShadow = LShadow + RShadow + TShadow + BShadow + LTShadow + RTShadow + LBShadow + RBShadow;

		float avgShadowDepthSample = (CShadow + nbShadow) / 9.0f;
		//float avgShadowDepthSample = CShadow;

		float esm = exp(-pEsmControl * posLS.z) * exp(pEsmControl * avgShadowDepthSample);

		shadowFactor = saturate(2.0 - esm);

#endif
	}


	float3 finalColor;

	if (isPBR > 0.5f)
	{
		finalColor = PBR_shadowFactor(NoL, NoV, -normalizedDirToLight, ViewVec, HalfVec, normal, albedo, specularColor, Roughness, Metallic, isBackface, shadowFactor);
	}
	else
	{
		specularColor = calculateSpecular(specularColor, pCamPos, position, -normalizedDirToLight, normal);

		finalColor = albedo + lerp(float3(0.0, 0.0, 0.0), specularColor, shadowFactor);
	}

	finalColor *= shadowFactor;

	return finalColor;
}

float3 pointLightShade(
	float3 normal,
	float3 ViewVec,
	float3 HalfVec,
	float3 ReflectVec,
	float NoL,
	float NoV,
	float3 lightPos,
	float3 lightCol,
	float3 pCamPos,
	float3 normalizedDirToLight, float4 posLS, float3 position,
	float3 albedo,
	float3 specularColor,
	float Roughness,
	float Metallic,
	bool isBackface,
	float isPBR,
	float radius)
{
	float3 lVec = (lightPos - position) * (1.0 / radius);
	// float3 lightVec = normalize(lVec);
	float atten = saturate(1.0f - dot(lVec, lVec));
	
	float3 finalColor;

	if (isPBR > 0.5f)
	{
		finalColor = PBR(NoL, NoV, -normalizedDirToLight, ViewVec, HalfVec, normal, albedo, specularColor, Roughness, Metallic, isBackface);
	}
	else
	{
		specularColor = calculateSpecular(specularColor, pCamPos, position, -normalizedDirToLight, normal);

		finalColor = albedo + specularColor;
	}
	   
	return lightCol * finalColor * atten;
}
