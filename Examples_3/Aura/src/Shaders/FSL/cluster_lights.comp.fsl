/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This is a part of Aura.
 * 
 * This file(code) is licensed under a 
 * Creative Commons Attribution-NonCommercial 4.0 International License 
 *
 *   (https://creativecommons.org/licenses/by-nc/4.0/legalcode) 
 *
 * Based on a work at https://github.com/ConfettiFX/The-Forge.
 * You may not use the material for commercial purposes.
*/

#include "shading.h.fsl"
#include "light_cull_resources.h.fsl"

// This compute shader determines if a light of index groupId overlaps
// the cluster (thread.x,thread.y). Then the light is added to the cluster.

NUM_THREADS(LIGHT_CLUSTER_WIDTH, LIGHT_CLUSTER_HEIGHT, 1)
void CS_MAIN(SV_GroupThreadID(uint3) threadInGroupId, SV_GroupID(uint3) groupId)
{
	INIT_MAIN;

	const float invClusterWidth  = 1.0f / float(LIGHT_CLUSTER_WIDTH);
	const float invClusterHeight = 1.0f / float(LIGHT_CLUSTER_HEIGHT);
	const float2 windowSize      = Get(cullingViewports)[VIEW_CAMERA].windowSize;

	const float aspectRatio = windowSize.x / windowSize.y;
	
	LightData lightData = Get(lights)[groupId.x];
	
	float4 lightPosWorldSpace = float4(lightData.position.xyz, 1.0f);
	float4 lightPosClipSpace  = mul(Get(transform)[VIEW_CAMERA].vp.mat, lightPosWorldSpace);
	float invLightPosW = 1.0f / lightPosClipSpace.w;
	float3 lightPos = lightPosClipSpace.xyz * invLightPosW;

	float fov = 2.0*atan( 1.0/Get(transform)[VIEW_CAMERA].projection.mat[1][1] );
	float projRadius = 2.0f * LIGHT_SIZE * (1 / tan(fov * 0.5f)) * invLightPosW;
	projRadius *= windowSize.x > windowSize.y ? aspectRatio : 1 / aspectRatio;
	
	// Early exit light if it's behind the camera
	if (lightPosClipSpace.w < 0.0f && -lightPosClipSpace.w > LIGHT_SIZE)
		RETURN();
	
	lightPos.x *= aspectRatio;
	
	// Cluster coordinates in post perspective clip space
	float clusterLeft   = float(threadInGroupId.x) * invClusterWidth;
	float clusterTop    = float(threadInGroupId.y) * invClusterHeight;
	float clusterRight  = clusterLeft + invClusterWidth;
	float clusterBottom = clusterTop + invClusterHeight;

	// Transform coordinates from range [0..1] to range [-1..1]
	clusterLeft   = clusterLeft   * 2.0f - 1.0f;
	clusterTop    = clusterTop    * 2.0f - 1.0f;
	clusterRight  = clusterRight  * 2.0f - 1.0f;
	clusterBottom = clusterBottom * 2.0f - 1.0f;

	clusterLeft  *= aspectRatio;
	clusterRight *= aspectRatio;

	float clusterCenterX = (clusterLeft + clusterRight) * 0.5f;
	float clusterCenterY = (clusterTop + clusterBottom) * 0.5f;
	float clusterRadius  = distance(float2(clusterLeft, clusterTop), float2(clusterRight, clusterBottom)) * 0.5f;

	// Check if the light projection overlaps the cluster: add the light bit to this cluster coords
	float distanceToCenter = distance(float2(clusterCenterX, clusterCenterY), lightPos.xy);

	if (distanceToCenter - clusterRadius < abs(projRadius))
	{
		// Increase light count on this cluster
		uint lightArrayPos = 0;
		AtomicAdd(Get(lightClustersCount)[LIGHT_CLUSTER_COUNT_POS(threadInGroupId.x, threadInGroupId.y)], 1, lightArrayPos);

		// Add light id to cluster
		AtomicExchange(Get(lightClusters)[LIGHT_CLUSTER_DATA_POS(lightArrayPos, threadInGroupId.x, threadInGroupId.y)], groupId.x, lightArrayPos);
	}

	RETURN();
}
